[{"527473651":"1","873316548":"2","-817594511":"3"},{"file":"4","attributes":"5","content":"6","dir":"7"},{"file":"8","attributes":"9","content":"10","dir":"7"},{"file":"11","attributes":"12","content":"13","dir":"7"},{"path":"14","mtime":"15"},{},"<p>echo &quot;# chapter 1&quot; &gt; chapter1/README.md\necho &quot;content...&quot; &gt; chapter1/section1.1.md</p>\n","ltr",{"path":"16","mtime":"17"},{},"<h1>Introduction</h1>\n",{"path":"18","mtime":"19"},{},"<h1>DeePMD-kit Quick Start Tutorial</h1>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#deepmd-kit-quick-start-tutorial\">DeePMD-kit Quick Start Tutorial</a><ul>\n<li><a href=\"#table-of-contents\">Table of Contents</a></li>\n<li><a href=\"#1-overview\">1. Overview</a></li>\n<li><a href=\"#2-task\">2. Task</a></li>\n<li><a href=\"#3-background\">3. Background</a></li>\n<li><a href=\"#4-practice\">4. Practice</a><ul>\n<li><a href=\"#41-data-preparation\">4.1. Data Preparation</a></li>\n<li><a href=\"#42-prepare-input-script\">4.2. Prepare Input Script</a></li>\n<li><a href=\"#43-train-a-model\">4.3. Train a Model</a></li>\n<li><a href=\"#44-freeze-a-model\">4.4. Freeze a Model</a></li>\n<li><a href=\"#45-compress-a-model-optional\">4.5. Compress a Model (Optional)</a></li>\n<li><a href=\"#46-test-a-model\">4.6. Test a Model</a></li>\n<li><a href=\"#47-run-md-with-lammps\">4.7. Run MD with LAMMPS</a></li>\n</ul>\n</li>\n<li><a href=\"#5-references\">5. References</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>1. Overview</h2>\n<p><strong>DeePMD-kit</strong> is a software tool that employs neural networks to fit potential energy surfaces (PES) based on first-principles (DFT-level) data for molecular dynamics (MD) simulations. Once a DeePMD-kit model (or <strong>Deep Potential</strong>, DP) is trained, it can be used seamlessly in common MD engines such as <strong>LAMMPS</strong>, <strong>GROMACS</strong>, and <strong>OpenMM</strong>.</p>\n<p>By leveraging machine learning and high-performance computing (HPC), DeePMD-kit can:</p>\n<ul>\n<li>Achieve <em>ab initio</em> accuracy at a fraction of the computational cost.</li>\n<li>Scale to very large systems (hundreds of millions of atoms) thanks to HPC optimizations.</li>\n<li>Serve as a plug-and-play force field for advanced MD simulations in physics, chemistry, materials science, and other related fields.</li>\n</ul>\n<hr>\n<h2>2. Task</h2>\n<p>In this tutorial, we demonstrate the basic workflow for using <strong>DeePMD-kit</strong>:</p>\n<ol>\n<li><strong>Prepare a dataset</strong> (DFT or AIMD data).</li>\n<li><strong>Convert</strong> it to DeePMD-kit’s compressed format (using <a href=\"https://github.com/deepmodeling/dpdata\">dpdata</a> or other methods).</li>\n<li><strong>Train</strong> a DP model with <code>dp train</code>.</li>\n<li><strong>Freeze</strong> the trained model into a <code>.pb</code> file for inference.</li>\n<li>(Optional) <strong>Compress</strong> the model for speed and memory savings.</li>\n<li><strong>Test</strong> the model’s accuracy.</li>\n<li><strong>Use</strong> the model in your favorite MD engine (e.g., LAMMPS) to run production molecular dynamics.</li>\n</ol>\n<p>By the end of this tutorial, you will:</p>\n<ul>\n<li>Understand how to configure a DeePMD-kit training input in JSON.</li>\n<li>Convert raw data to the DeePMD-kit format.</li>\n<li>Train, test, and freeze a DP model.</li>\n<li>Run an MD simulation in LAMMPS using <code>pair_style deepmd</code>.</li>\n</ul>\n<p><strong>Estimated time</strong>: ~20 minutes.</p>\n<hr>\n<h2>3. Background</h2>\n<p>Here, we showcase an example of <em>gaseous methane</em> (<code>CH4</code>). We assume you already have an ab initio MD trajectory or a set of static DFT calculations. The principal steps are:</p>\n<ol>\n<li><strong>Prepare data</strong>:<ul>\n<li>Convert your raw DFT or AIMD outputs (e.g., from VASP, CP2K, Quantum Espresso, ABACUS, LAMMPS) into DeePMD-kit’s standard compressed NumPy format.</li>\n</ul>\n</li>\n<li><strong>Train</strong>:<ul>\n<li>Use <code>dp train input.json</code> with your training (and validation) sets.</li>\n</ul>\n</li>\n<li><strong>Freeze</strong>:<ul>\n<li>Convert the TensorFlow checkpoint into a single <code>.pb</code> file.</li>\n</ul>\n</li>\n<li><strong>Compress</strong> (optional):<ul>\n<li>Optimize the <code>.pb</code> network for faster inference.</li>\n</ul>\n</li>\n<li><strong>Test</strong>:<ul>\n<li>Evaluate energies/forces vs. reference data.</li>\n</ul>\n</li>\n<li><strong>Run MD</strong>:<ul>\n<li>Plug into LAMMPS with <code>pair_style deepmd</code>.</li>\n</ul>\n</li>\n</ol>\n<p>DeePMD-kit’s success has been recognized widely, including earning the <strong>2020 ACM Gordon Bell Prize</strong> for HPC.</p>\n<hr>\n<h2>4. Practice</h2>\n<p>Below is a hands-on demonstration. (All commands shown assume you have <strong>DeePMD-kit</strong>, <strong>dpdata</strong>, and <strong>LAMMPS</strong> installed in your environment.)</p>\n<h3>4.1. Data Preparation</h3>\n<ol>\n<li><strong>Acquire or generate</strong> first-principles data. In this example, we have an <strong>ABACUS</strong> MD trajectory for methane.</li>\n<li><strong>Convert</strong> to DeePMD-kit format using <a href=\"https://github.com/deepmodeling/dpdata\">dpdata</a>. For instance:</li>\n</ol>\n<pre><code class=\"lang-python\">import dpdata\nimport numpy as np\n\n# Load data of ABACUS MD format\ndata = dpdata.LabeledSystem(&quot;00.data/abacus_md&quot;, fmt=&quot;abacus/md&quot;)\nprint(f&quot;Number of frames: {len(data)}&quot;)\n\n# Randomly select validation frames\nrng = np.random.default_rng()\nindex_val = rng.choice(len(data), size=40, replace=False)\nindex_train = list(set(range(len(data))) - set(index_val))\n\ndata_train = data.sub_system(index_train)\ndata_val   = data.sub_system(index_val)\n\n# Save in DeePMD-kit format\ndata_train.to_deepmd_npy(&quot;00.data/training_data&quot;)\ndata_val.to_deepmd_npy(&quot;00.data/validation_data&quot;)\n\nprint(f&quot;Training frames:   {len(data_train)}&quot;)\nprint(f&quot;Validation frames: {len(data_val)}&quot;)\n</code></pre>\n<ol>\n<li><p>After this step, you should see directories like:</p>\n<pre><code>00.data/\n├── abacus_md/\n├── training_data/\n└── validation_data/\n</code></pre><p>Each contains a <code>set.000</code> directory with compressed data, plus <code>type.raw</code> and <code>type_map.raw</code>.</p>\n</li>\n</ol>\n<hr>\n<h3>4.2. Prepare Input Script</h3>\n<p>DeePMD-kit requires a <strong>JSON</strong> file specifying the training hyperparameters, network architecture, and file paths. Below is an <strong>example</strong> <code>input.json</code>:</p>\n<pre><code class=\"lang-jsonc\">{\n  &quot;model&quot;: {\n    &quot;type_map&quot;: [&quot;H&quot;, &quot;C&quot;],\n    &quot;descriptor&quot;: {\n      &quot;type&quot;: &quot;se_e2_a&quot;,\n      &quot;rcut&quot;: 6.0,\n      &quot;rcut_smth&quot;: 0.5,\n      &quot;sel&quot;: &quot;auto&quot;,\n      &quot;neuron&quot;: [25, 50, 100],\n      &quot;axis_neuron&quot;: 16,\n      &quot;resnet_dt&quot;: false,\n      &quot;seed&quot;: 1\n    },\n    &quot;fitting_net&quot;: {\n      &quot;neuron&quot;: [240, 240, 240],\n      &quot;resnet_dt&quot;: true,\n      &quot;seed&quot;: 1\n    }\n  },\n\n  &quot;learning_rate&quot;: {\n    &quot;type&quot;: &quot;exp&quot;,\n    &quot;decay_steps&quot;: 50,\n    &quot;start_lr&quot;: 0.001,\n    &quot;stop_lr&quot;: 3.51e-8\n  },\n\n  &quot;loss&quot;: {\n    &quot;type&quot;: &quot;ener&quot;,\n    &quot;start_pref_e&quot;: 0.02,\n    &quot;limit_pref_e&quot;: 1,\n    &quot;start_pref_f&quot;: 1000,\n    &quot;limit_pref_f&quot;: 1,\n    &quot;start_pref_v&quot;: 0,\n    &quot;limit_pref_v&quot;: 0\n  },\n\n  &quot;training&quot;: {\n    &quot;training_data&quot;: {\n      &quot;systems&quot;: [&quot;../00.data/training_data&quot;],\n      &quot;batch_size&quot;: &quot;auto&quot;\n    },\n    &quot;validation_data&quot;: {\n      &quot;systems&quot;: [&quot;../00.data/validation_data&quot;],\n      &quot;batch_size&quot;: &quot;auto&quot;,\n      &quot;numb_btch&quot;: 1\n    },\n    &quot;numb_steps&quot;: 10000,\n    &quot;seed&quot;: 10,\n    &quot;disp_file&quot;: &quot;lcurve.out&quot;,\n    &quot;disp_freq&quot;: 200,\n    &quot;save_freq&quot;: 1000\n  }\n}\n</code></pre>\n<p><strong>Key parameters</strong>:</p>\n<ul>\n<li><strong>type_map</strong>: Mapping of atomic types (<code>[&quot;H&quot;, &quot;C&quot;]</code> here).</li>\n<li><strong>descriptor</strong>: E2_a descriptor with cutoff radius = 6.0 Å, smoothing start = 0.5 Å, neural network sizes, etc.</li>\n<li><strong>fitting_net</strong>: Fitting network architecture <code>[240, 240, 240]</code>.</li>\n<li><strong>loss</strong>: Weighted training for energies (<code>pref_e</code>) and forces (<code>pref_f</code>).</li>\n<li><strong>training</strong>: Number of steps (<code>numb_steps</code> = 10000), batch sizes, data paths.</li>\n</ul>\n<hr>\n<h3>4.3. Train a Model</h3>\n<p>From the directory containing your <code>input.json</code>, simply run:</p>\n<pre><code class=\"lang-bash\">dp train input.json\n</code></pre>\n<p>DeePMD-kit will print periodic output like:</p>\n<pre><code>DEEPMD INFO    batch    1000 training time ...\nDEEPMD INFO    saved checkpoint model.ckpt\n...\n</code></pre><p>and produce a <code>lcurve.out</code> containing stepwise loss metrics. Key columns are:</p>\n<ol>\n<li><strong>step</strong></li>\n<li><strong>rmse_val</strong></li>\n<li><strong>rmse_trn</strong></li>\n<li><strong>rmse_e_val</strong> (energy validation error per atom)</li>\n<li><strong>rmse_e_trn</strong> (energy training error per atom)</li>\n<li><strong>rmse_f_val</strong> (forces validation error)</li>\n<li><strong>rmse_f_trn</strong> (forces training error)</li>\n<li><strong>learning rate</strong></li>\n</ol>\n<p>You should see the RMS errors dropping over steps.</p>\n<hr>\n<h3>4.4. Freeze a Model</h3>\n<p>DeePMD-kit stores the model in TensorFlow checkpoints by default. To create a single <code>.pb</code> file:</p>\n<pre><code class=\"lang-bash\">dp freeze -o graph.pb\n</code></pre>\n<p>This <strong>frozen</strong> model is used for inference in MD codes like LAMMPS.</p>\n<hr>\n<h3>4.5. Compress a Model (Optional)</h3>\n<p>Model compression can speed up inference further:</p>\n<pre><code class=\"lang-bash\">dp compress -i graph.pb -o compress.pb\n</code></pre>\n<p>This creates a <code>compress.pb</code>. You can use it in place of <code>graph.pb</code> if desired.</p>\n<hr>\n<h3>4.6. Test a Model</h3>\n<p>To evaluate the model on a validation set and compare energies/forces:</p>\n<pre><code class=\"lang-bash\">dp test -m graph.pb -s ../00.data/validation_data\n</code></pre>\n<p>It will print average and RMS errors for energy, force, and virial:</p>\n<pre><code>Energy MAE         : x.xxxe-03 eV\nEnergy MAE/Natoms  : x.xxxe-04 eV\nForce  MAE         : x.xxxe-02 eV/A\n...\n</code></pre><p>You can also test using Python:</p>\n<pre><code class=\"lang-python\">import dpdata\nval_system = dpdata.LabeledSystem(&quot;../00.data/validation_data&quot;, fmt=&quot;deepmd/npy&quot;)\nprediction = val_system.predict(&quot;graph.pb&quot;)\n\n# For a quick correlation plot:\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.scatter(val_system[&quot;energies&quot;], prediction[&quot;energies&quot;], alpha=0.5)\nplt.plot([min(val_system[&quot;energies&quot;]), max(val_system[&quot;energies&quot;])],\n         [min(val_system[&quot;energies&quot;]), max(val_system[&quot;energies&quot;])],\n         &#39;r--&#39;, linewidth=0.5)\nplt.xlabel(&quot;DFT Energy (eV)&quot;)\nplt.ylabel(&quot;DP Predicted Energy (eV)&quot;)\nplt.show()\n</code></pre>\n<hr>\n<h3>4.7. Run MD with LAMMPS</h3>\n<p>Copy your model file (e.g., <code>graph.pb</code>) to your LAMMPS run directory.<br>Then write an <strong>in.lammps</strong> with something like:</p>\n<pre><code class=\"lang-lammps\">units           metal\natom_style      atomic\nboundary        p p p\n\nread_data       conf.lmp\n\npair_style      deepmd graph.pb\npair_coeff      * *\n\ntimestep        0.001\nthermo          100\nrun             5000\n</code></pre>\n<p>Finally, run LAMMPS:</p>\n<pre><code class=\"lang-bash\">lmp -i in.lammps\n</code></pre>\n<p>You will see LAMMPS output indicating a <strong>Deep Potential</strong> style, and the system will evolve under your DP potential.</p>\n<hr>\n<h2>5. References</h2>\n<ul>\n<li><strong>DeePMD-kit</strong> documentation:<br><a href=\"https://deepmd.readthedocs.io\">https://deepmd.readthedocs.io</a></li>\n<li><strong>dpdata</strong> for data conversion:<br><a href=\"https://github.com/deepmodeling/dpdata\">https://github.com/deepmodeling/dpdata</a></li>\n<li>Original DeePMD-kit paper:<ul>\n<li>Wang, Han, et al. <em>Comput. Phys. Commun.</em> <strong>228</strong>, 178–184 (2018).</li>\n</ul>\n</li>\n<li>Gordon Bell Prize 2020 highlight:<ul>\n<li><a href=\"https://deepmodeling.com/gordon-bell-2020/\">https://deepmodeling.com/gordon-bell-2020/</a></li>\n</ul>\n</li>\n</ul>\n<p>For detailed installation instructions, additional examples, GPU optimization tips, and advanced features (like active learning, MLPot for automatically exploring configuration space, etc.), please consult the official <a href=\"https://deepmd.rtfd.io/\">DeePMD-kit Documentation</a>.</p>\n<p><strong>Happy Deep Potential Modeling!</strong></p>\n","chapter1/README.md","2025-02-04T14:44:37.613Z","README.md","2025-02-04T14:43:48.223Z","deepmd/README.md","2025-02-04T15:09:23.747Z"]